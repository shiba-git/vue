v-once 実行を一度だけにする。書き換え処理の書き換え前などを表示することが可能。
(動画　22分)

v-html 関数内にタグを入れてもエスケープ処理をしてくれる
扱い注意。ユーザからの情報を受け取る場合は使用しない(XSS)

v-bind hrefなど属性値にそのまま二重カッコでいれても実行されないものを実行させる
v-onなどイコールで実行をそのままHTMLに記述するのはナンセンス。vue内のメソッドに記述する。

: bindの省略記法
@ onの省略記法　省略するかしないかは統一する。

v-onでイベント発火をさせている状態のみ。
function(event) からconsole.log(event)で中身を取得することができる。
event.clientX event.clientY

複数の引数を利用して、eventを入れる場合は$eventとする。

スタッププロパゲーション？　Vueは　.stopのみで対応可能。

prevetDefaultは　.preventで対応可能。
v-on:keyup.enter keyup,spec な真後ろに追加できる。
動画56分

v-model HTMLからVueの内容を書き換えることが可能なもの。

動的なプロパティ
dataを動的な表現をすることができない。あくまで初期値

computedプロパティ
関数で書き、プロパティなのでreturnで返す
またthisでdataにアクセスする
return後は同期処理を書くのが普通。非同期処理はかけない

computed methodの違い
methodは　{{ function() }}でテンプレートで実行すると
テンプレート内が書きかわると実行される。関数内の変数が関係なくても実行される

なのでcomputedプロパティを使用する。computedプロパティは賢く、関数内にある変数が書き換わったのみ実行
される仕組みになっている。

watchは基本的には使用しない。computedを使用するのがベストプラクティス
変更された時に非同期に処理をすることができる。（例：３秒後に処理など）

computed （）をつけない
methodは()を付ける
@click = {{ countUp() }} //JavaScriptとして実行
@click = {{ countUp }} //Vue.jsとして実行

クラスやstyleバインドは、オブジェクトか配列で指定する(積極的にオブジェクトを使用する)
'background-color'みたいなケバブ形式は''で囲って指定する

配列構文で指定する場合は、複数のオブジェクトを指定する場合に役に立つ。



